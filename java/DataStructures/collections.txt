1) Collection : Root of the collection hierarchy. A collection
                represents a group of objects known as its elements.
2) Set        : Collection that cannot contain duplicate elements. This
                inferface models the mathematical set abstraction and is used 
                to represent sets.
3) List       : An ordered collection which can contain duplicate elements.
4) Queue      : Collection used to hold multiple elements prior to processing.
                Queues typically but not always order data in a FIFO manner.
5) Deque      : Collection used to hold multiple elements prior to processing.
                Besides basic Collection operations, a Deque provides 
                insertion, extraction, and inspection operations.
6) Map        : An object that maps keys to values. A Map cannot contain 
                duplicate keys; each key can map to at most one value.
7) SortedSet  : A Set that maintains its elements in ascending order.
                Several additional operations are provided to take advantage
                of the ordering.
8) SortedMap  : A Map that maintains its mappings in ascending key order.


*Collection interface
    boolean addAll(Collection<> elements)
        Adds all the specified elements to the specified collection
    Queue   asLifoQueue(Deque<> deque)
        Returns a view of a Deque as a LIFO Queue
    
